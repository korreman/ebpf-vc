(set-logic UFBV)
(set-option :produce-unsat-cores true)
(declare-fun is_buffer ((_ BitVec 64) (_ BitVec 64)) Bool)

(assert (! (forall ((r0 (_ BitVec 64)) (r1 (_ BitVec 64)) (r2 (_ BitVec 64)) (r3 (_ BitVec 64)) (r4 (_ BitVec 64)) (r5 (_ BitVec 64)) (r6 (_ BitVec 64)) (r7 (_ BitVec 64)) (r8 (_ BitVec 64)) (r9 (_ BitVec 64))) (=> true (forall ((v7 (_ BitVec 64))) (=> (= v7 r3) (forall ((v6 (_ BitVec 64))) (=> (= v6 (bvmul v7 #x0000000000000008)) (forall ((v5 (_ BitVec 64))) (=> (= v5 (bvadd v6 r1)) (and (exists ((p3 (_ BitVec 64))) (exists ((s3 (_ BitVec 64))) (and (is_buffer p3 s3) (and (bvule p3 (bvadd v5 #xfffffffffffffff8)) (bvult (bvadd v5 #xfffffffffffffff8) (bvsub (bvadd p3 s3) #x0000000000000007)))))) (forall ((v4 (_ BitVec 64))) (and (exists ((p2 (_ BitVec 64))) (exists ((s2 (_ BitVec 64))) (and (is_buffer p2 s2) (and (bvule p2 (bvadd v5 #x0000000000000000)) (bvult (bvadd v5 #x0000000000000000) (bvsub (bvadd p2 s2) #x0000000000000007)))))) (forall ((v3 (_ BitVec 64))) (or (and (bvult v4 v3) (=> (bvult v4 v3) (forall ((v2 (_ BitVec 64))) (=> (= v2 (bvadd r3 #x0000000000000001)) (or (and (bvult v2 r2) (=> (bvult v2 r2) true)) (and (not (bvult v2 r2)) (=> (not (bvult v2 r2)) (forall ((v1 (_ BitVec 64))) (=> (= v1 (bvadd r4 #x0000000000000001)) (or (and (bvult v1 r2) (=> (bvult v1 r2) true)) (and (not (bvult v1 r2)) (=> (not (bvult v1 r2)) true)))))))))))) (and (not (bvult v4 v3)) (=> (not (bvult v4 v3)) (and (exists ((p1 (_ BitVec 64))) (exists ((s1 (_ BitVec 64))) (and (is_buffer p1 s1) (and (bvule p1 (bvadd v5 #xfffffffffffffff8)) (bvult (bvadd v5 #xfffffffffffffff8) (bvsub (bvadd p1 s1) #x0000000000000007)))))) (and (exists ((p0 (_ BitVec 64))) (exists ((s0 (_ BitVec 64))) (and (is_buffer p0 s0) (and (bvule p0 (bvadd v5 #x0000000000000000)) (bvult (bvadd v5 #x0000000000000000) (bvsub (bvadd p0 s0) #x0000000000000007)))))) (forall ((v2 (_ BitVec 64))) (=> (= v2 (bvadd r3 #x0000000000000001)) (or (and (bvult v2 r2) (=> (bvult v2 r2) true)) (and (not (bvult v2 r2)) (=> (not (bvult v2 r2)) (forall ((v1 (_ BitVec 64))) (=> (= v1 (bvadd r4 #x0000000000000001)) (or (and (bvult v1 r2) (=> (bvult v1 r2) true)) (and (not (bvult v1 r2)) (=> (not (bvult v1 r2)) true))))))))))))))))))))))))))) :named vc_inner_loop))

(assert (! (forall ((r0 (_ BitVec 64)) (r1 (_ BitVec 64)) (r2 (_ BitVec 64)) (r3 (_ BitVec 64)) (r4 (_ BitVec 64)) (r5 (_ BitVec 64)) (r6 (_ BitVec 64)) (r7 (_ BitVec 64)) (r8 (_ BitVec 64)) (r9 (_ BitVec 64))) (=> true true)) :named vc_outer_loop))

(assert (! (forall ((r0 (_ BitVec 64)) (r1 (_ BitVec 64)) (r2 (_ BitVec 64)) (r3 (_ BitVec 64)) (r4 (_ BitVec 64)) (r5 (_ BitVec 64)) (r6 (_ BitVec 64)) (r7 (_ BitVec 64)) (r8 (_ BitVec 64)) (r9 (_ BitVec 64))) (=> (and (and true (is_buffer r1 (bvmul r2 #x0000000000000008))) (bvult #x0000000000000001 r2)) true)) :named vc_entry))

(check-sat)
(get-unsat-core)(exit)
